#include <Servo.h>

//HC-SR04 (5V) - ultrasonic sensor to measure distance
#define SONAR_TRIG_PIN A5 
#define SONAR_ECHO_PIN 2
#define SONAR_INTERRUPT 0 //Note: pin 2
volatile int distance = -1;
volatile long distCalcStartTime = 0;

//L293D Motor Drive

// 8-bit bus after the 74HC595 shift register
// (not Arduino pins)
// These are used to set the direction of the bridge driver.
#define MOTOR1_A 2
#define MOTOR1_B 3
#define MOTOR2_A 1
#define MOTOR2_B 4
#define MOTOR3_A 5
#define MOTOR3_B 7
#define MOTOR4_A 0
#define MOTOR4_B 6

// Codes for the motor function.
#define FORWARD 1
#define BACKWARD 2
#define BRAKE 3
#define RELEASE 4

//Arduino pins for the PWM signals.
#define MOTOR1_PWM 11
#define MOTOR2_PWM 3
#define MOTOR3_PWM 6
#define MOTOR4_PWM 5
//#define SERVO2_PWM 9

// Arduino pins for the shift register
#define MOTORLATCH 12
#define MOTORCLK 4
#define MOTORENABLE 7
#define MOTORDATA 8

// Codes for the motor function.
#define MOTOR_MOVE_FORWARD = 1;
#define MOTOR_MOVE_BACKWARD = 0;


//SG90 9G Mini Servo (5V)
//const int SERVO_PIN = 6;
#define SERVO_PIN 10

Servo servo;

void setup()
{
   //HC-SR04
   pinMode(SONAR_TRIG_PIN, OUTPUT);
   pinMode(SONAR_ECHO_PIN, INPUT);
   //interrupt when SONAR_ECHO_PIN changes; used instead of pulseIn(SONAR_ECHO_PIN, HIGH);
   attachInterrupt(SONAR_INTERRUPT, calculateDistance, CHANGE);
   
   //L293D
   /*
   pinMode(MOTOR_LEFT_FORWARD_PIN, OUTPUT);
   pinMode(MOTOR_LEFT_BACKWARD_PIN, OUTPUT);
   pinMode(MOTOR_LEFT_SPEED_PWM_PIN, OUTPUT);
   pinMode(MOTOR_RIGHT_FORWARD_PIN, OUTPUT);
   pinMode(MOTOR_RIGHT_BACKWARD_PIN, OUTPUT);
   pinMode(MOTOR_RIGHT_SPEED_PWM_PIN, OUTPUT);   
  */
  
   //SG90
   servo.attach(SERVO_PIN);
   
   Serial.begin(9600);
}


/*
void moveMotor(int motorNumber, int motorDirection, int motorSpeed)
{
   int motorForwardPin;
   int motorBackwardPin;
   int motorSpeedPin;
   
   if(motorNumber == MOTOR_RIGHT) {
      motorForwardPin = MOTOR_RIGHT_FORWARD_PIN;
      motorBackwardPin = MOTOR_RIGHT_BACKWARD_PIN;
      motorSpeedPin = MOTOR_RIGHT_SPEED_PWM_PIN;
      Serial.print("RIGHT, ");
   }
   else {
      motorForwardPin = MOTOR_LEFT_FORWARD_PIN;
      motorBackwardPin = MOTOR_LEFT_BACKWARD_PIN;
      motorSpeedPin = MOTOR_LEFT_SPEED_PWM_PIN;
      Serial.print("LEFT, ");
   }
   
   if(motorDirection == MOTOR_MOVE_FORWARD) {
      digitalWrite(motorForwardPin, HIGH);
      digitalWrite(motorBackwardPin, LOW);
      Serial.print("FORWARD, ");
   }
   else {
      digitalWrite(motorForwardPin, LOW);
      digitalWrite(motorBackwardPin, HIGH);
      Serial.print("BACKWARD, ");
   }
   
   Serial.print(motorForwardPin);
   Serial.print(", ");
   Serial.print(motorBackwardPin);
   Serial.print(", ");
   Serial.print(motorSpeedPin);
   Serial.print(", ");
   Serial.println(motorSpeed);
      
   analogWrite(motorSpeedPin, motorSpeed);
}
*/
void moveServo(int angle)
{
   servo.write(angle); 
}

void motor(int nMotor, int command, int speed)
{
  int motorA, motorB;

  if (nMotor >= 1 && nMotor <= 4)
  {  
    switch (nMotor)
    {
    case 1:
      motorA   = MOTOR1_A;
      motorB   = MOTOR1_B;
      break;
    case 2:
      motorA   = MOTOR2_A;
      motorB   = MOTOR2_B;
      break;
    case 3:
      motorA   = MOTOR3_A;
      motorB   = MOTOR3_B;
      break;
    case 4:
      motorA   = MOTOR4_A;
      motorB   = MOTOR4_B;
      break;
    default:
      break;
    }

    switch (command)
    {
    case FORWARD:
      motor_output (motorA, HIGH, speed);
      motor_output (motorB, LOW, -1);     // -1: no PWM set
      break;
    case BACKWARD:
      motor_output (motorA, LOW, speed);
      motor_output (motorB, HIGH, -1);    // -1: no PWM set
      break;
    case BRAKE:
      // The AdaFruit library didn't implement a brake.
      // The L293D motor driver ic doesn't have a good
      // brake anyway.
      // It uses transistors inside, and not mosfets.
      // Some use a software break, by using a short
      // reverse voltage.
      // This brake will try to brake, by enabling
      // the output and by pulling both outputs to ground.
      // But it isn't a good break.
      motor_output (motorA, LOW, 255); // 255: fully on.
      motor_output (motorB, LOW, -1);  // -1: no PWM set
      break;
    case RELEASE:
      motor_output (motorA, LOW, 0);  // 0: output floating.
      motor_output (motorB, LOW, -1); // -1: no PWM set
      break;
    default:
      break;
    }
  }
}


// ---------------------------------
// motor_output
//
// The function motor_ouput uses the motor driver to
// drive normal outputs like lights, relays, solenoids,
// DC motors (but not in reverse).
//
// It is also used as an internal helper function
// for the motor() function.
//
// The high_low variable should be set 'HIGH'
// to drive lights, etc.
// It can be set 'LOW', to switch it off,
// but also a 'speed' of 0 will switch it off.
//
// The 'speed' sets the PWM for 0...255, and is for
// both pins of the motor output.
//   For example, if motor 3 side 'A' is used to for a
//   dimmed light at 50% (speed is 128), also the
//   motor 3 side 'B' output will be dimmed for 50%.
// Set to 0 for completelty off (high impedance).
// Set to 255 for fully on.
// Special settings for the PWM speed:
//    Set to -1 for not setting the PWM at all.
//
void motor_output (int output, int high_low, int speed)
{
  int motorPWM;

  switch (output)
  {
  case MOTOR1_A:
  case MOTOR1_B:
    motorPWM = MOTOR1_PWM;
    break;
  case MOTOR2_A:
  case MOTOR2_B:
    motorPWM = MOTOR2_PWM;
    break;
  case MOTOR3_A:
  case MOTOR3_B:
    motorPWM = MOTOR3_PWM;
    break;
  case MOTOR4_A:
  case MOTOR4_B:
    motorPWM = MOTOR4_PWM;
    break;
  default:
    // Use speed as error flag, -3333 = invalid output.
    speed = -3333;
    break;
  }

  if (speed != -3333)
  {
    // Set the direction with the shift register
    // on the MotorShield, even if the speed = -1.
    // In that case the direction will be set, but
    // not the PWM.
    shiftWrite(output, high_low);

    // set PWM only if it is valid
    if (speed >= 0 && speed <= 255)    
    {
      analogWrite(motorPWM, speed);
    }
  }
}


// ---------------------------------
// shiftWrite
//
// The parameters are just like digitalWrite().
//
// The output is the pin 0...7 (the pin behind
// the shift register).
// The second parameter is HIGH or LOW.
//
// There is no initialization function.
// Initialization is automatically done at the first
// time it is used.
//
void shiftWrite(int output, int high_low)
{
  static int latch_copy;
  static int shift_register_initialized = false;

  // Do the initialization on the fly,
  // at the first time it is used.
  if (!shift_register_initialized)
  {
    // Set pins for shift register to output
    pinMode(MOTORLATCH, OUTPUT);
    pinMode(MOTORENABLE, OUTPUT);
    pinMode(MOTORDATA, OUTPUT);
    pinMode(MOTORCLK, OUTPUT);

    // Set pins for shift register to default value (low);
    digitalWrite(MOTORDATA, LOW);
    digitalWrite(MOTORLATCH, LOW);
    digitalWrite(MOTORCLK, LOW);
    // Enable the shift register, set Enable pin Low.
    digitalWrite(MOTORENABLE, LOW);

    // start with all outputs (of the shift register) low
    latch_copy = 0;

    shift_register_initialized = true;
  }

  // The defines HIGH and LOW are 1 and 0.
  // So this is valid.
  bitWrite(latch_copy, output, high_low);

  // Use the default Arduino 'shiftOut()' function to
  // shift the bits with the MOTORCLK as clock pulse.
  // The 74HC595 shiftregister wants the MSB first.
  // After that, generate a latch pulse with MOTORLATCH.
  shiftOut(MOTORDATA, MOTORCLK, MSBFIRST, latch_copy);
  delayMicroseconds(5);    // For safety, not really needed.
  digitalWrite(MOTORLATCH, HIGH);
  delayMicroseconds(5);    // For safety, not really needed.
  digitalWrite(MOTORLATCH, LOW);
}

void startDistanceCalculation()
{
   //Clear the SONAR_TRIG_PIN
   digitalWrite(SONAR_TRIG_PIN, LOW);
   delayMicroseconds(2);

   //Set the SONAR_TRIG_PIN on HIGH state for 10 micro seconds
   digitalWrite(SONAR_TRIG_PIN, HIGH);
   delayMicroseconds(10);
   digitalWrite(SONAR_TRIG_PIN, LOW);

   //distCalcStartTime = millis();
}

void calculateDistance()
{
  switch(digitalRead(SONAR_ECHO_PIN))
  {
    //Start of pulse
    case HIGH:
      distCalcStartTime = micros();
      break;

    //Pulse done; calculate distance in cm
    case LOW:
      long now = micros();
      distance = (now - distCalcStartTime)*0.034/2;

      /*
      Serial.println("");
      Serial.print("Found interrupt: distCalcStartTime=");
      Serial.print(distCalcStartTime);
      Serial.print(" , now = ");
      Serial.print(now);
      Serial.print(" , delta = ");
      Serial.print(now - distCalcStartTime);
      Serial.print(" distance calculated = ");
      Serial.println(distance);
      delay(1000000);
      */
      distCalcStartTime = 0;
      break;
  }
}

void loop()
{
   //Move servo 60 to 120 degress
   //int angle = 60+(sin(millis()/250.0)+1) * 30.0;
   //moveServo(angle);

   //WORKS
   //moveServo(0);  
   //delay(2000);
   //moveServo(180);
   //delay(2000);
   //moveServo(90);
   //delay(2000);

   //while(1) {
   //   Serial.println(millis());
   //   digitalWrite(SONAR_ECHO_PIN, HIGH);   
   //   delay(10000);
   //   digitalWrite(SONAR_ECHO_PIN, LOW);   
   //   delay(10000);
   //}


   //TODO: INTERRUPT PIN!!!!!
   //Calculate distance
   Serial.print("Distance: ");
   Serial.println(distance);
   if(!distCalcStartTime) {
      startDistanceCalculation();
   }

   //Serial.print("SONAR ECHO PIN VALUE:"); Serial.println(digitalRead(SONAR_ECHO_PIN));

  //WORKS - refactor
  //motor(4, FORWARD, 255);
  //delay(2000);
  // Be friendly to the motor: stop it before reverse.
  //motor(3, RELEASE, 0);
  //delay(500);
  //motor(4, BACKWARD, 128);
  //delay(2000);
  //motor(4, RELEASE, 0);
   
   /*
   if(distance > 20) {
      //Move forward
      moveMotor(MOTOR_LEFT, MOTOR_MOVE_FORWARD, 255);
      moveMotor(MOTOR_RIGHT, MOTOR_MOVE_FORWARD, 255);
   }
   else {
      //Move backwards
      moveMotor(MOTOR_LEFT, MOTOR_MOVE_BACKWARD, 255);
      moveMotor(MOTOR_RIGHT, MOTOR_MOVE_BACKWARD, 255);
      delay(500);
      //Turn to the left
      moveMotor(MOTOR_LEFT, MOTOR_MOVE_BACKWARD, 255);
      moveMotor(MOTOR_RIGHT, MOTOR_MOVE_BACKWARD, 0);
      delay(500);
   }
   */
}
